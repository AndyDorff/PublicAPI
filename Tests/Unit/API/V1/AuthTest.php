<?php

namespace Modules\PublicAPI\Tests\Unit\API\V1;

use Illuminate\Foundation\Testing\TestResponse;
use Illuminate\Support\Arr;
use Modules\Core\Tests\Unit\Traits\TestConnection;
use Modules\PublicAPI\Domain\Application\Interfaces\ApplicationsRepositoryInterface;
use Modules\PublicAPI\Domain\Application\Repositories\EloquentApplicationsRepository;
use Tests\TestCase;

class AuthTest extends TestCase
{
	use TestConnection;

    private $applications;
    private $application;

    protected function afterInitConnection(): void
    {
	    \Artisan::call('module:migrate --database=sqlite_testing PublicAPI');
    }

	public function setUp(): void
    {
        parent::setUp();
        $this->applications = new EloquentApplicationsRepository($this->connection);
        $this->application = $this->applications->newInstance('Test APP');
        $this->applications->save($this->application);

        app()->instance(ApplicationsRepositoryInterface::class, $this->applications);
    }

    public function tearDown(): void
    {
        parent::tearDown(); // TODO: Change the autogenerated stub
    }

    /**
     * A basic unit test example.
     *
     * @return void
     */
    public function testExample()
    {
        $this->assertTrue(true);
    }

    public function testValidAuthenticateRequest()
    {
        $response = $this->sendAuthRequest();

        $responseData = $response->decodeResponseJson();

        $response->assertStatus(200);
        $response->assertExactJson([
            'code' => 200,
            'status' => 'success',
            'status_code' => 'authenticated',
            'message' => $responseData['message'],
            'data' => [
                'access_token' => [
                    'token' => Arr::get($responseData, 'data.access_token.token'),
                    'expires_date' => Arr::get($responseData, 'data.access_token.expires_date')
                ]
            ]
        ]);
    }

    private function sendAuthRequest(array $data = null): TestResponse
    {
        $data = $data ?? [
                'app_key' => (string)$this->application->key(),
                'app_secret' => (string)$this->application->secret()
            ];

        return $this->postJson(route('api.v1.auth'), $data);
    }

    public function testInvalidAuthenticateRequest()
    {
        $application = $this->applications->newInstance('Another API');

        $response = $this->sendAuthRequest([
            'app_key' => (string)$application->key(),
            'app_secret' => (string)$application->secret()
        ]);

        $responseData = $response->decodeResponseJson();

        $response->assertStatus(404);
        $response->assertJson([
            'code' => 404,
            'status' => 'error',
            'status_code' => 'app_not_found',
            'message' => $responseData['message'],
            'data' => []
        ]);
    }

    public function testInvalidCredentialsAuthenticateRequest()
    {
        $response = $this->sendAuthRequest([
            'app_key' => 'invalid_key',
            'app_secret' => 'invalid_secret'
        ]);

        $responseData = $response->decodeResponseJson();

        $response->assertStatus(422);
        $response->assertJson([
            'code' => 422,
            'status' => 'error',
            'status_code' => 'invalid_credentials',
            'message' => $responseData['message'],
            'data' => [
                'errors' => [
                    'app_key' => Arr::get($responseData, 'data.errors.app_key'),
                    'app_secret' => Arr::get($responseData, 'data.errors.app_secret')
                ]
            ]
        ]);
    }

    public function testAuthByRightTokenInQueryParam()
    {
        $response = $this->sendAuthRequest();
        list($token, $exp) = array_values($response->json('data.access_token'));

        $response = $this->getJson(route('api.v1.auth.token', ['token' => $token]));

        $responseData = $response->decodeResponseJson();

        $response->assertStatus(200);
        $response->assertJson([
            'code' => 200,
            'status' => 'success',
            'status_code' => 'token_received',
            'message' => $responseData['message'],
            'data' => [
                'token' => $token,
                'expires_date' => $exp
            ]
        ]);
    }

    public function testAuthByRightTokenInAuthorizationHeader()
    {
        $response = $this->sendAuthRequest();
        list($token, $exp) = array_values($response->json('data.access_token'));

        $response = $this->getJson(route('api.v1.auth.token'), [
            'Authorization' => 'Bearer ' . $token
        ]);
        $responseData = $response->decodeResponseJson();

        $response->assertStatus(200);
        $response->assertJson([
            'code' => 200,
            'status' => 'success',
            'status_code' => 'token_received',
            'message' => $responseData['message'],
            'data' => [
                'token' => $token,
                'expires_date' => $exp
            ]
        ]);
    }

    public function testAuthWithNoToken()
    {
        $this->sendAuthRequest();

        $response = $this->getJson(route('api.v1.auth.token', ['token' => '']));
        $responseData = $response->decodeResponseJson();

        $response->assertStatus(401);
        $response->assertHeader('WWW-Authenticate', 'bearer');
        $response->assertJson([
            'code' => 401,
            'status' => 'error',
            'status_code' => 'no_token',
            'message' => $responseData['message'],
            'data' => []
        ]);
    }

    public function testAuthWithWrongToken()
    {
        list($token, $exp) = array_values($this->sendAuthRequest()->json('data.access_token'));

        $response = $this->getJson(route('api.v1.auth.token', ['token' => substr($token, 0, -1)]));
        $responseData = $response->decodeResponseJson();

        $response->assertStatus(401);
        $response->assertHeader('WWW-Authenticate', 'bearer');
        $response->assertJson([
            'code' => 401,
            'status' => 'error',
            'status_code' => 'invalid_token',
            'message' => $responseData['message'],
            'data' => []
        ]);
    }

    public function testAuthWithExpiredToken()
    {
        $token = $this->getExpiredToken();
        $response = $this->getJson(route('api.v1.auth.token', ['token' => $token]));
        $responseData = $response->decodeResponseJson();

        $response->assertStatus(401);
        $response->assertHeader('WWW-Authenticate', 'bearer');
        $response->assertJson([
            'code' => 401,
            'status' => 'error',
            'status_code' => 'access_token_expired',
            'message' => $responseData['message'],
            'data' => []
        ]);
    }

    private function getExpiredToken(): string
    {
        $this->sendAuthRequest();
        $token = auth()->claims(['exp' => time() + 1])->attempt([
            (string)$this->application->key(),
            (string)$this->application->secret()
        ]);

        sleep(1); //for expiration

        return $token;
    }

    public function testRefreshToken()
    {
        $token = $this->getExpiredToken();

        $response = $this->putJson(route('api.v1.auth.token.refresh', ['token' => $token]));
        $responseData = $response->decodeResponseJson();

        list($newToken, $newExp) = array_values($responseData['data']);

        $response->assertStatus(200);
        $response->assertJson([
            'code' => 200,
            'status' => 'success',
            'status_code' => 'token_refreshed',
            'message' => $responseData['message'],
            'data' => [
                'token' => $newToken,
                'expires_date' => $newExp
            ]
        ]);
        $this->assertNotEquals($token, $newToken);
    }

    public function testRefreshTokenWithNoToken()
    {
        $response = $this->putJson(route('api.v1.auth.token.refresh'));
        $responseData = $response->decodeResponseJson();

        $response->assertStatus(401);
        $response->assertHeader('WWW-Authenticate', 'bearer');
        $response->assertJson([
            'code' => 401,
            'status' => 'error',
            'status_code' => 'no_token',
            'message' => $responseData['message'],
            'data' => []
        ]);
    }

    public function testRefreshTokenWithInvalidToken()
    {
        $token = $this->getExpiredToken();
        $response = $this->putJson(route('api.v1.auth.token.refresh', ['token' => substr($token, 0, -1)]));
        $responseData = $response->decodeResponseJson();

        $response->assertStatus(401);
        $response->assertHeader('WWW-Authenticate', 'bearer');
        $response->assertJson([
            'code' => 401,
            'status' => 'error',
            'status_code' => 'invalid_token',
            'message' => $responseData['message'],
            'data' => []
        ]);
    }

    public function testAuthWithCompletelyExpiredToken()
    {
        $this->sendAuthRequest();
        $token = auth()->claims([
            'exp' => time() + 1,
            'iat' => time() - (config('jwt.refresh_ttl') * 60)
        ])->attempt([
            (string)$this->application->key(),
            (string)$this->application->secret()
        ]);

        sleep(1);

        // шлем запрос на получение токена (проверка аутентификации)
        $response = $this->getJson(route('api.v1.auth.token', ['token' => $token]));
        // не прошли авторизацию -- токен просрочен
        $this->assertTrue($response->json('status_code') === 'access_token_expired');
        // шлем запрос на обновление токена
        $response = $this->putJson(route('api.v1.auth.token.refresh', ['token' => $token]));
        $responseData = $response->decodeResponseJson();
        // не смогли обновить токен -- токен полностью просрочен, нужно заново отправлять credentials
        $response->assertStatus(401);
        $response->assertHeader('WWW-Authenticate', 'bearer');
        $response->assertJson([
            'code' => 401,
            'status' => 'error',
            'status_code' => 'refresh_token_expired',
            'message' => $responseData['message'],
            'data' => []
        ]);
    }

    public function testSuspendedAppAuthenticate()
    {
        $this->application->deactivate();
        $this->applications->save($this->application);

        $response = $this->sendAuthRequest();

        $response->assertStatus(403);
        $response->assertJson([
            'code' => 403,
            'status' => 'error',
            'status_code' => 'app_suspended',
            'message' => $response->json('message'),
            'data' => []
        ]);
    }

    public function testDeletedAppAuthenticate()
    {
        $this->applications->delete($this->application->key());

        $response = $this->sendAuthRequest();

        $response->assertStatus(404);
        $response->assertJson([
            'code' => 404,
            'status' => 'error',
            'status_code' => 'app_not_found',
            'message' => $response->json('message'),
            'data' => []
        ]);
    }

    public function testAuthForSuspendedApp()
    {
        list($token, $exp) = array_values($this->sendAuthRequest()->json('data.access_token'));

        $this->application->deactivate();
        $this->applications->save($this->application);

        $response = $this->getJson(route('api.v1.auth.token', ['token' => $token]));

        $response->assertStatus(403);
        $response->assertJson([
            'code' => 403,
            'status' => 'error',
            'status_code' => 'app_suspended',
            'message' => $response->json('message'),
            'data' => []
        ]);
    }

    public function testAuthForDeletedApp()
    {
        list($token, $exp) = array_values($this->sendAuthRequest()->json('data.access_token'));

        $this->applications->delete($this->application->key());

        $response = $this->getJson(route('api.v1.auth.token', ['token' => $token]));

        $response->assertStatus(404);
        $response->assertJson([
            'code' => 404,
            'status' => 'error',
            'status_code' => 'app_not_found',
            'message' => $response->json('message'),
            'data' => []
        ]);
    }

    public function testSendingRequestByNotDefinedMethod()
    {
        list($token, $exp) = array_values($this->sendAuthRequest()->json('data.access_token'));
        $response = $this->postJson(route('api.v1.auth.token.refresh', ['token' => $token]));

        $response->assertStatus(400);
    }

    public function testRouteForwarding()
    {
        list($token, $exp) = array_values($this->sendAuthRequest()->json('data.access_token'));

        $url = route('api.v1.fw.routes', [
            'rel' => 'forwarding/to/another/route',
            'token' => $token
        ]);

        $response = $this->getJson($url);
        $response->assertStatus(200);
        $this->assertTrue($response->json('status_code') === 'ok');
    }
}
